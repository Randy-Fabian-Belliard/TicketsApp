@page "/R_Clientes"
@rendermode InteractiveServer
@inject ClientesServices ClientesServices

<EditForm Model="cliente" OnValidSubmit="Guardar"> 
    <DataAnnotationsValidator/>
    <div class ="card">

        <div class="card-header">
            <h1>Registro de clientes</h1>
        </div>

    <div class="card-body">

                <!-- Para el nombre -->
            
                <label class="form-label">Nombre</label>
                <InputText @bind-Value="cliente.Nombres" class="form-control" />
                <ValidationMessage For="@(() => cliente.Nombres)" /> 

                <!-- Para el telefono -->
                <label class="form-label">Teléfono</label>
                <InputText @bind-Value="cliente.Telefono" class="form-control"/>
                <ValidationMessage For="@(() => cliente.Telefono)" />

                <!-- Para el celular -->
                <label class="form-label">Celular</label>
                <InputText @bind-Value="cliente.Celular" class="form-control"/>
                <ValidationMessage For="@(() => cliente.Celular)" />

                <!-- Para el Rnc -->
                <label class="form-label">Rnc</label>
                <InputText @bind-Value="cliente.Rnc" class="form-control"placeholder="Ejemplo: 001-1234567-8"/>
                <ValidationMessage For="@(() => cliente.Rnc)" />

                <!-- Para el Email -->
                <label class="form-label">Email</label>
                <InputText @bind-Value="cliente.Email" class="form-control"/>
                <ValidationMessage For="@(() => cliente.Email)" />

                <!-- Para la direcion -->
                <label class="form-label">Dirección</label>
                <InputText @bind-Value="cliente.Direccion" class="form-control"/>
                <ValidationMessage For="@(() => cliente.Direccion)" />

        </div>
        <div class="card-footer d-flex justify-content-center">
            <button type="submit" class="btn btn-outline-success">Guardar</button>
        </div>

      </div>  
</EditForm>

@code{

    public Clientes cliente {get; set; } = new Clientes();
   async Task Guardar()
    {
        if (Validar())
        {
            if (await ClientesServices.Guardar(cliente))
                Nuevo();
        }
    }

    async Task Eliminar()
    {
        if (await ClientesServices.Eliminar(cliente))
        {
            Nuevo();
        }
    }

    void Nuevo()
    {
        cliente = new Clientes();
    }

    bool Validar()
    {
        if ((string.IsNullOrEmpty(cliente.Nombres)))
        {
            return false;
        }
        else if ((string.IsNullOrEmpty(cliente.Direccion)))
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    async Task Buscar()
    {
        var clienteEncontrado = await ClientesServices.Buscar(cliente.ClienteId);

        if (clienteEncontrado != null)
        {
            this.cliente = clienteEncontrado;
        }
    }

    void ToUpperText(string value)
    {
        cliente.Direccion = value.ToUpper();
    }


}