@page "/Ed_Sistemas/{SistemaId:int}"
@inject SistemasServices SistemasServices
@rendermode InteractiveServer

<EditForm Model="sistema" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Editar Sistema</h1>
        </div>
        <div class="card-body">
            <div class="col-4">
                <label>ID de sistema:</label>
                <InputNumber @bind-Value="sistema.SistemaId" class="form-control" disabled></InputNumber>
            </div>
            <div class="col-4">
                <label>Nombre:</label>
                <InputText @bind-Value="sistema.Nombre" class="form-control"></InputText>
                <ValidationMessage For="@(() => sistema.Nombre)" />
            </div>
        </div>
        <div class="card-footer d-flex justify-content-center">
            <button type="button" class="btn btn-outline-success" @onclick="Guardar">Guardar</button>
        </div>
    </div>
</EditForm>

@code {
    private string sistemasForm = "sistemasForm";
    [Parameter]
    public int SistemaId { get; set; }

    public Sistemas sistema = new Sistemas();

    protected override async Task OnInitializedAsync()
    {
        if (SistemaId > 0)
        {
            sistema.SistemaId = SistemaId;
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var sistemaEncontrado = await SistemasServices.Buscar(sistema.SistemaId);

        if (sistemaEncontrado != null)
            this.sistema = sistemaEncontrado;
    }

    public bool Validar()
    {
        return !string.IsNullOrEmpty(sistema.Nombre);
    }

    public void Nuevo()
    {
        this.sistema = new Sistemas();
    }

    public async Task Guardar()
    {
        if (Validar() && await SistemasServices.Guardar(this.sistema))
        {
            Nuevo();
        }
    }
}
