@page "/Ed_Clientes/{ClienteId:int}"
@rendermode InteractiveServer
@inject ClientesServices ClientesServices
@inject NavigationManager NavigationManager

<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Editar Cliente</h1>
        </div>
        <div class="card-body">
            <div class="col-4">
                <label>ID de cliente:</label>
                <InputNumber @bind-Value="cliente.ClienteId" class="form-control" disabled></InputNumber>
            </div>
            <div class="col-4">
                <label>Nombres:</label>
                <InputText @bind-Value="cliente.Nombres" class="form-control"></InputText>
                <ValidationMessage For="@(() => cliente.Nombres)" />
            </div>
            <div class="col-4">
                <label>Teléfono:</label>
                <InputText @bind-Value="cliente.Telefono" class="form-control"></InputText>
                <ValidationMessage For="@(() => cliente.Telefono)" />
            </div>
            <div class="col-4">
                <label>Celular:</label>
                <InputText @bind-Value="cliente.Celular" class="form-control"></InputText>
                <ValidationMessage For="@(() => cliente.Celular)" />
            </div>
            <div class="col-4">
                <label>RNC:</label>
                <InputText @bind-Value="cliente.Rnc" class="form-control"></InputText>
                <ValidationMessage For="@(() => cliente.Rnc)" />
            </div>
            <div class="col-4">
                <label>Email:</label>
                <InputText @bind-Value="cliente.Email" class="form-control"></InputText>
                <ValidationMessage For="@(() => cliente.Email)" />
            </div>
            <div class="col-4">
                <label>Dirección:</label>
                <InputText @bind-Value="cliente.Direccion" class="form-control"></InputText>
                <ValidationMessage For="@(() => cliente.Direccion)" />
            </div>
        </div>
        <div class="card-footer d-flex justify-content-center">
            <button type="button" class="btn btn-outline-danger" @onclick="Guardar">Editar</button>
        </div>
    </div>
</EditForm>

@code {
    private string clientesForm = "clientesForm";
    [Parameter]
    public int ClienteId { get; set; }

    public Clientes cliente = new Clientes();
    private bool nombreExistente = false;

    protected override async Task OnInitializedAsync()
    {
        if (ClienteId > 0)
        {
            cliente.ClienteId = ClienteId;
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var clienteEncontrado = await ClientesServices.Buscar(cliente.ClienteId);

        if (clienteEncontrado != null)
            this.cliente = clienteEncontrado;
    }

    public void Nuevo()
    {
        this.cliente = new Clientes();
        nombreExistente = false;
    }

    public async Task Guardar()
    {
        if (await ClientesServices.Guardar(this.cliente))
        {
            Nuevo();
        }
    }

    public async Task Eliminar()
    {
        if (await ClientesServices.Eliminar(this.cliente))
        {
            Nuevo();
        }
    }
}
